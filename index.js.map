{"version":3,"sources":["src/Client.js","src/ConnectingMessageBuffer.js","src/Constants.js","src/EventEmitter.js","src/HubClient.js","src/HubProxy.js","src/index.js","src/PromiseMaker.js","src/Protocol.js","src/transports/index.js","src/transports/LongPollingTransport.js","src/transports/NullTransport.js","src/transports/ServerSentEventsTransport.js","src/transports/Transport.js","src/transports/WebSocketTransport.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import async from 'async';\r\nimport Logdown from 'logdown';\r\nimport request from 'superagent';\r\nimport PromiseMaker from './PromiseMaker';\r\nimport EventEmitter from './EventEmitter';\r\nimport ConnectingMessageBuffer from './ConnectingMessageBuffer';\r\nimport {CLIENT_STATES, CLIENT_EVENTS, CONNECTION_EVENTS, CLIENT_PROTOCOL_VERSION} from './Constants';\r\nimport {AvailableTransports} from './transports/index';\r\n\r\nexport const CLIENT_CONFIG_DEFAULTS = {\r\n  url: '/signalr',\r\n  logging: false,\r\n  logger: new Logdown({prefix: 'SignalR Client'}),\r\n  hubClient: false,\r\n  totalTransportConnectTimeout: 10000\r\n};\r\n\r\n/**\r\n * The public API for managing communications with a SignalR server\r\n * @class\r\n * @public\r\n */\r\nexport default class Client extends EventEmitter {\r\n  /**\r\n   * Initializes th' client object wit' userdefined options. Options can include a multitude 'o properties, includin' th' ship URL,\r\n   * a set transport protocol th' user wishes to use, a hub client, th' timeout to use when connection, 'n loggin' mechanisms.\r\n   * @param {Object} options Defines the options that the client will initialize with.\r\n   * @constructs\r\n   * @returns {Client} Returns a new client object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    this._config = Object.assign({}, CLIENT_CONFIG_DEFAULTS, options || {});\r\n    this._logger = this._config.logger;\r\n    this.state = CLIENT_STATES.stopped;\r\n    this._connectingMessageBuffer = new ConnectingMessageBuffer(this, this.emit.bind(this, CLIENT_EVENTS.received));\r\n    this.connectionData = [];\r\n\r\n  }\r\n\r\n  /**\r\n   * Accessor fer th' state property 'o th' client. Sets th' state to newState 'n automatically emits th' correct events.\r\n   * @param {string} newState The new state of the client.\r\n   * @public\r\n   * @emits stateChanging\r\n   * @emits stateChanged\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  set state(newState) {\r\n    if(!this._state) {\r\n      this._state = newState;\r\n    } else {\r\n      this.emit(CLIENT_EVENTS.stateChanging, {oldState: this.state, newState});\r\n      this._state = newState;\r\n      this.emit(CLIENT_EVENTS.stateChanged, newState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *Accessor fer th' state property 'o th' client. Returns th' current state 'o th' client.\r\n   * @returns {*} Returns the current state.\r\n   */\r\n  get state() {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Starts th' underlyin' connection to th' ship.\r\n   * @param {Object} options contains any updated treaty values that be used to start th' connection.\r\n   * @returns {Promise} that resolves once th' connection be opened successfully.\r\n   * @public\r\n   * @function\r\n   * @emits starting\r\n   * @emits started\r\n   * @emits error\r\n   */\r\n  start(options) {\r\n    this._config = Object.assign(this._config, options);\r\n    if(this.state !== CLIENT_STATES.stopped) {\r\n      this.emit(CLIENT_EVENTS.error);\r\n      throw new Error('The SignalR client is in an invalid state. You only need to call `start()` once and it cannot be called while reconnecting.');\r\n    }\r\n    this.emit(CLIENT_EVENTS.starting);\r\n    this.state = CLIENT_STATES.starting;\r\n    return this._negotiate()\r\n      .then(this._findTransport.bind(this))\r\n      .then(transport => {\r\n        this._logger.info(`Using the *${transport.constructor.name}*.`);\r\n        this._transport = transport;\r\n        this.emit(CLIENT_EVENTS.started);\r\n        this.state = CLIENT_STATES.started;\r\n        this._connectingMessageBuffer.drain();\r\n        return this;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Stops th' connection to th' ship\r\n   * @returns {Promise} that resolves once th' connection has closed successfully.\r\n   * @public\r\n   * @function\r\n   * @emits stopping\r\n   * @emits stopped\r\n   */\r\n  stop() {\r\n    if(this._transport) {\r\n      this.state = CLIENT_STATES.stopping;\r\n      this.emit(CLIENT_EVENTS.stopping);\r\n      this._transport.stop();\r\n      this.state = CLIENT_STATES.stopped;\r\n      this.emit(CLIENT_EVENTS.stopped);\r\n      this._logger.info('Client stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a message to th' connected ship if th' transport be valid.\r\n   * @param {object} data Th' message to send.\r\n   * @public\r\n   * @function\r\n   * @returns {void} Nothing is returned by this method.\r\n   * */\r\n  send(data) {\r\n    if(this._transport) {\r\n      this._transport.send(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A connnection and client event handler that is listening for an 'error' event.\r\n   * Event is emitted when an error is thrown.\r\n   * @param {function} callback Contains the error message. //TODO: Implement error events\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  error(callback) {\r\n    this.on(CLIENT_EVENTS.error, callback);\r\n  }\r\n\r\n  /**\r\n   * A client event handler that is listening for a 'starting' event.\r\n   * Event is emitted when the client begins initialization.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  starting(callback) {\r\n    this.on(CLIENT_EVENTS.starting, callback);\r\n  }\r\n\r\n  /**\r\n   * A client event handler that is listening for a 'started' event.\r\n   * Event is emitted once the client has secured a connection successfully.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  started(callback) {\r\n    this.on(CLIENT_EVENTS.started, callback);\r\n  }\r\n\r\n  /**\r\n   * A client event handler that is listening for a 'stopping' event.\r\n   * Event is emitted once the client has initiated a disconnect.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  stopping(callback) {\r\n    this.on(CLIENT_EVENTS.stopping, callback);\r\n  }\r\n\r\n  /**\r\n   * A client event handler that is listening for a 'stopped' event.\r\n   * Event is emitted once the client has successfully disconnected from the server.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  stopped(callback) {\r\n    this.on(CLIENT_EVENTS.stopped, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection and client event handler that is listening for a 'receiving' event.\r\n   * Event is emitted whenever a message is received by the client from the server. (Message is in compressed, raw form from server).\r\n   * @param {function} callback Contains the compressed message data that the client is currently receiving.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  receiving(callback) {\r\n    this.on(CLIENT_EVENTS.receiving, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection and client event handler that is listening for a 'received' event.\r\n   * Event is emitted whenever a message is received by the client from the server. (Message is decompressed by client, making it more managable).\r\n   * @param {function} callback Contains the received decompressed message data.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  received(callback) {\r\n    this.on(CLIENT_EVENTS.received, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection and client event handler that is listening for a 'stateChanging' event.\r\n   * Event is emitted whenever the client's state or the connection's state is in the process of changing.\r\n   * @param {function} callback Contains both the old and new state.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  stateChanging(callback) {\r\n    this.on(CLIENT_EVENTS.stateChanging, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection and client event handler that is listening for a 'stateChanged' event.\r\n   * Event is emitted whenever the client's state or the connection's state has changed.\r\n   * @param {function} callback Contains the new state.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  stateChanged(callback) {\r\n    this.on(CLIENT_EVENTS.stateChanged, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event handler that is listening for a 'disconnecting' event.\r\n   * Event is emitted once the connection is in the process of stopping, initiated by the user, or automatically if the connection is lost unexpectedly.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  disconnecting(callback) {\r\n    this.on(CONNECTION_EVENTS.disconnecting, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event handler that is listening for a 'disconnected' event.\r\n   * Event is emitted once the connection has been completely haulted by the uesr, or has been lost unexpectedly.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  disconnected(callback) {\r\n    this.on(CONNECTION_EVENTS.disconnected, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event handler that is listening for a 'reconnecting' event.\r\n   * Event is emitted if the connection has been lost unexpectedly and is automatically attempting to reconnect.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  reconnecting(callback) {\r\n    this.on(CONNECTION_EVENTS.reconnecting, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event handler that is listening for a 'reconnected' event.\r\n   * Event is emitted if the connection has been successfully re-established after an unexpected disconnect.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  reconnected(callback) {\r\n    this.on(CONNECTION_EVENTS.reconnected, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event listener that is listening for a 'connecting' event.\r\n   * Event is emitted if the user has used the client to try and negotiate a connection to a server.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  connecting(callback) {\r\n    this.on(CONNECTION_EVENTS.connecting, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event listener that is listening for a 'onConnected' event.\r\n   * Event is emitted if the connection to the server was successfully established.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  connected(callback) {\r\n    this.on(CONNECTION_EVENTS.onConnected, callback);\r\n  }\r\n\r\n  /**\r\n   * A connection event listener that is listeing for a 'connectionSlow' event.\r\n   * Currently not implemented.\r\n   * @param {function} callback Method that is executed once a starting event has been fired.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Nothing is returned by this method.\r\n   */\r\n  connectionSlow(callback) {\r\n    this.on(CLIENT_EVENTS.connectionSlow, callback);\r\n  }\r\n\r\n  /**\r\n   * Negotiates th' request to th' ship 'n returns th' consequental promise that be created as a result.\r\n   * @returns {*} Returns the treaty for the server request.\r\n   * @protected\r\n   * @function\r\n   */\r\n  _negotiate() {\r\n    return request\r\n      .get(`${this._config.url}/negotiate`)\r\n      .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\r\n      .use(PromiseMaker)\r\n      .promise();\r\n  }\r\n\r\n  /**\r\n   * Takes a treaty (result 'o _negotiate()) 'n uses that 'n th' client configuration to find th' best transport protocol to use.\r\n   * A user may specify a transport as well if they would like to not use th' automated selection 'o one.\r\n   * @param {Object} treaty The result of the initial negotiation with the server.\r\n   * @returns {Promise} A promise that will automatically find the best connection type, or to use the one defined by the user.\r\n   * @function\r\n   * @private\r\n   */\r\n  _findTransport(treaty) {\r\n    return new Promise((resolve, reject) => {\r\n        const availableTransports = AvailableTransports();\r\n        if(this._config.transport && this._config.transport !== 'auto') {\r\n          const transportConstructor = availableTransports.filter(x => x.name === this._config.transport)[0];\r\n          if(transportConstructor) {\r\n            // If the transport specified in the config is found in the available transports, use it\r\n            const transport = new transportConstructor(this, treaty, this._config.url);\r\n            transport.start().then(() => resolve(transport));\r\n          } else {\r\n            reject(new Error(`The transport specified (${this._config.transport}) was not found among the available transports [${availableTransports.map(x => `'${x.name}'`).join(' ')}].`));\r\n          }\r\n        } else {\r\n          // Otherwise, Auto Negotiate the transport\r\n          this._logger.info(`Negotiating the transport...`);\r\n          async.detectSeries(availableTransports.map(x => new x(this, treaty, this._config.url)),\r\n            (t, c) => t.start().then(() => c(t)).catch(() => c()),\r\n            transport => transport ? resolve(transport) : reject('No suitable transport was found.'));\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","import {CONNECTION_STATES} from './Constants';\r\n\r\nexport default class ConnectingMessageBuffer {\r\n  /**\r\n   * Takes the client and drainCallback and creates an efficient buffer for buffering recieved messages.\r\n   * @param {Client} client The current instance of the user's client.\r\n   * @param {bool} drainCallback A boolean to decide wherer to drain the buffer.\r\n   * @constructor\r\n   * @returns {ConnectingMessageBuffer} Creates a new ConnectingMessageBuffer.\r\n   */\r\n  constructor(client, drainCallback) {\r\n    this.buffer = [];\r\n    this.client = client;\r\n    this.drainCallback = drainCallback;\r\n  }\r\n\r\n  /**\r\n   * Attempts to add a passed in message to the buffer.\r\n   * @param {Object} message The message to be pushed into the buffer.\r\n   * @returns {boolean} Returns false if the client is currently not connecting.\r\n   * @function\r\n   * @public\r\n   */\r\n  tryBuffer(message) {\r\n    if(this.client.transport === CONNECTION_STATES.connecting) {\r\n      this.buffer.push(message);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Drains the current buffer and removes all messages.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Method does not return any value.\r\n   */\r\n  drain() {\r\n    // Ensure that the connection is connected when we drain (do not want to drain while a connection is not active)\r\n    if(this.client.transport === CONNECTION_STATES.connected) {\r\n      while(this.buffer.length > 0) {\r\n        this.drainCallback(buffer.shift());\r\n      }\r\n    }\r\n  }\r\n}","export const CLIENT_PROTOCOL_VERSION = 1.3;\r\n\r\n/**\r\n * A collection of the different states a connection may be in.\r\n * @exports CONNECTION_STATES\r\n * @type {{connecting: number, connected: number, reconnecting: number, disconnected: number}}\r\n * @readonly\r\n * @public\r\n */\r\nexport const CONNECTION_STATES = {\r\n  connecting: 0,\r\n  connected: 1,\r\n  reconnecting: 2,\r\n  disconnected:4\r\n};\r\n/**\r\n * A collection of different states that the client may be in.\r\n * @exports CLIENT_STATES\r\n * @type {{starting: number, started: number, stopping: number, stopped: number}}\r\n * @readonly\r\n * @public\r\n */\r\nexport const CLIENT_STATES = {\r\n  starting: 8,\r\n  started: 16,\r\n  stopping: 32,\r\n  stopped: 64\r\n};\r\n\r\n/**\r\n * A collection of all of the currently defined events that may be fired off during different stages of a connection's lifecycle.\r\n * @exports CONNECTION_EVENTS\r\n * @type {{error: string, connectionSlow: string, connecting: string, onConnected: string, receiving: string, received: string, reconnecting: string, reconnected: string, stateChanging: string, stateChanged: string, disconnecting: string, disconnected: string}}\r\n * @readonly\r\n * @public\r\n */\r\nexport const CONNECTION_EVENTS = {\r\n  error: 'error',\r\n  connectionSlow: 'connectionSlow',\r\n  connecting: 'connecting',\r\n  onConnected: 'onConnected',\r\n  receiving: 'receiving',\r\n  received: 'received',\r\n  reconnecting: 'reconnecting',\r\n  reconnected: 'reconnected',\r\n  stateChanging: 'stateChanging',\r\n  stateChanged: 'stateChanged',\r\n  disconnecting: 'disconnecting',\r\n  disconnected: 'disconnected'\r\n};\r\n/**\r\n * A collection of all of the currently defined events that may be fired off during the different stages of the client's lifecycle.\r\n * @exports CLIENT_EVENTS\r\n * @type {{starting: string, started: string, stopping: string, stopped: string, error: string, stateChanging: string, stateChanged: string, receiving: string, received: string}}\r\n * @readonly\r\n * @public\r\n */\r\nexport const CLIENT_EVENTS = {\r\n  starting: 'starting',\r\n  started: 'started',\r\n  stopping: 'stopping',\r\n  stopped: 'stopped',\r\n  error: 'error',\r\n  stateChanging: 'stateChanging',\r\n  stateChanged: 'stateChanged',\r\n  receiving: 'receiving',\r\n  received: 'received'\r\n};\r\n\r\n/**\r\n * A collection of different messages that may be written to the console when certain conditions are met.\r\n * @exports RESOURCES\r\n * @type {{nojQuery: string, noTransportOnInit: string, errorOnNegotiate: string, stoppedWhileLoading: string, stoppedWhileNegotiating: string, errorParsingNegotiateResponse: string, errorDuringStartRequest: string, stoppedDuringStartRequest: string, errorParsingStartResponse: string, invalidStartResponse: string, protocolIncompatible: string, sendFailed: string, parseFailed: string, longPollFailed: string, eventSourceFailedToConnect: string, eventSourceError: string, webSocketClosed: string, pingServerFailedInvalidResponse: string, pingServerFailed: string, pingServerFailedStatusCode: string, pingServerFailedParse: string, noConnectionTransport: string, webSocketsInvalidState: string, reconnectTimeout: string, reconnectWindowTimeout: string}}\r\n * @readonly\r\n * @public\r\n */\r\nexport const RESOURCES = {\r\n  nojQuery: 'jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.',\r\n  noTransportOnInit: 'No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.',\r\n  errorOnNegotiate: 'Error during negotiation request.',\r\n  stoppedWhileLoading: 'The connection was stopped during page load.',\r\n  stoppedWhileNegotiating: 'The connection was stopped during the negotiate request.',\r\n  errorParsingNegotiateResponse: 'Error parsing negotiate response.',\r\n  errorDuringStartRequest: 'Error during start request. Stopping the connection.',\r\n  stoppedDuringStartRequest: 'The connection was stopped during the start request.',\r\n  errorParsingStartResponse: 'Error parsing start response: \\'{0}\\'. Stopping the connection.',\r\n  invalidStartResponse: 'Invalid start response: \\'{0}\\'. Stopping the connection.',\r\n  protocolIncompatible: 'You are using a version of the client that isn\\'t compatible with the server. Client version {0}, server version {1}.',\r\n  sendFailed: 'Send failed.',\r\n  parseFailed: 'Failed at parsing response: {0}',\r\n  longPollFailed: 'Long polling request failed.',\r\n  eventSourceFailedToConnect: 'EventSource failed to connect.',\r\n  eventSourceError: 'Error raised by EventSource',\r\n  webSocketClosed: 'WebSocket closed.',\r\n  pingServerFailedInvalidResponse: 'Invalid ping response when pinging server: \\'{0}\\'.',\r\n  pingServerFailed: 'Failed to ping server.',\r\n  pingServerFailedStatusCode: 'Failed to ping server.  Server responded with status code {0}, stopping the connection.',\r\n  pingServerFailedParse: 'Failed to parse ping server response, stopping the connection.',\r\n  noConnectionTransport: 'Connection is in an invalid state, there is no transport active.',\r\n  webSocketsInvalidState: 'The Web Socket transport is in an invalid state, transitioning into reconnecting.',\r\n  reconnectTimeout: 'Couldn\\'t reconnect within the configured timeout of {0} ms, disconnecting.',\r\n  reconnectWindowTimeout: 'The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.'\r\n};","import sum from 'lodash.sum';\r\nimport _ from 'lodash';\r\n\r\nexport default class EventEmitter {\r\n  constructor() {\r\n    this.observers = {};\r\n  }\r\n\r\n  /**\r\n   *Pushes an event to the passed in listener.\r\n   * @param {Object} event The event that was fired.\r\n   * @param {Object} listener The listener that the fired event will be pushed to.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Method does not return a value.\r\n   */\r\n  on(event, listener) {\r\n    this.observers[event] = this.observers[event] || [];\r\n    this.observers[event].push(listener);\r\n  }\r\n\r\n  /**\r\n   * Removes an event from a passed in listener.\r\n   * @param {Object} event Event to be removed from the listener.\r\n   * @param {Object} listener The listener the event will be removed from.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Method does not return a value.\r\n   */\r\n  off(event, listener) {\r\n    if (!this.observers[event]) {\r\n      return;\r\n    }\r\n    this.observers[event].forEach(() => {\r\n      if (! listener) {\r\n        delete this.observers[event];\r\n      } else {\r\n        var index = this.observers[event].indexOf(listener);\r\n        if (index > -1) {\r\n          this.observers[event].splice(index, 1);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emits the passed in event to all observers.\r\n   * @param {Object} event The event to be broadcasted to all available observers.\r\n   * @param {Object} args A variable number of objects passed in to attatch.\r\n   * @function\r\n   * @public\r\n   * @returns {void} Returns if there is no current observers for the passed in event.\r\n   */\r\n  emit(event, ...args) {\r\n    if (!this.observers[event]) {\r\n      return;\r\n    }\r\n\r\n    this.observers[event].forEach(observer => observer(...args));\r\n  }\r\n\r\n  /**\r\n   * Returns the true number of current observers.\r\n   * @returns {int} The current number of observers.\r\n   * @function\r\n   * @public\r\n   */\r\n  numberOfObservers() {\r\n    if(_.map(this.observers).map(x => x.length).length === 0){\r\n      return 0;\r\n    } else{\r\n      return sum(_.map(this.observers).map(x => x.length));\r\n    }\r\n  }\r\n}","import request from 'superagent';\r\nimport Logdown from 'logdown';\r\nimport {CLIENT_PROTOCOL_VERSION} from './Constants';\r\nimport Client, {CLIENT_CONFIG_DEFAULTS} from './Client';\r\nimport HubProxy from './HubProxy';\r\nimport Protocol from './Protocol';\r\nimport PromiseMaker from './PromiseMaker';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const HUB_CLIENT_CONFIG_DEFAULTS = {\r\n  logger: new Logdown({prefix: 'SignalR Hub-Client'}),\r\n  hubClient: true\r\n};\r\n/**\r\n *Th' Client that be used fer Hub connections.\r\n * @class\r\n */\r\nexport default class HubClient extends Client {\r\n  /**\r\n   *Uses passed in configuration settin's to initialize th' HubClient. Attatches event handlers that handle client invocations sent from th' ship,\r\n   * as well as registerin' th' proxies fer each Hub on startup.\r\n   * @param {Object} options The initial options defined by the user to initialize the HubClient with.\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n    this._config = Object.assign({}, CLIENT_CONFIG_DEFAULTS, HUB_CLIENT_CONFIG_DEFAULTS, options || {});\r\n    // Object to store hub proxies for this connection\r\n    this.proxies = {};\r\n    this.invocationCallbackId = 0;\r\n    this.invocationCallbacks = {};\r\n    this.connectionData = [];\r\n\r\n    this.starting(() => {\r\n      this._logger.info(`Registering Hub Proxies...`);\r\n      this._registerHubProxies();\r\n    });\r\n\r\n    this.received((minData) => {\r\n      if(!minData || !minData.length) {\r\n        return;\r\n      }\r\n      _.each(minData, md => {\r\n        const data = Protocol.expandClientHubInvocation(md);\r\n        const proxy = this.proxies[data.Hub];\r\n        if(proxy) {\r\n          this._logger.info(`\\`${data.Hub}\\` proxy found, invoking \\`${data.Method}\\`.`);\r\n          const func = proxy.funcs[data.Method];\r\n          if(func) {\r\n            const arrrrgs = Array.prototype.join(...data.Args, ', ');\r\n            this._logger.info(`Invoking \\`${data.Method}(${arrrrgs})\\`. `);\r\n            func(data.State, ...data.Args);\r\n          } else {\r\n            this._logger.warn(`Client function not found for method \\`${data.Method}\\` on hub \\`${data.Hub}\\`.`);\r\n          }\r\n        } else {\r\n          this._logger.error(`Proxy for ${data.Hub} not found.`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new hub proxy based on th' actual hub moniker.\r\n   * @param {string} hubName The name of the hub that the proxy will be created for.\r\n   * @returns {*|HubProxy} If th' proxy already exists, it return that individual proxy, else it creates a new one.\r\n   * @function\r\n   * @public\r\n   */\r\n  createHubProxy(hubName) {\r\n    const hubNameLower = hubName.toLowerCase();\r\n    this.connectionData.push({name: hubName});\r\n    return this.proxies[hubNameLower] || (this.proxies[hubNameLower] = new HubProxy(this, hubNameLower));\r\n  }\r\n\r\n  /**\r\n   * Calls th' base client's start method, initializin' th' connection. Currently unknown if extra code be needed.\r\n   * @param {Object} options Th' configuration to start th' client wit'.\r\n   * @returns {Promise} Returns a promise signifying that the connection has been intialized.\r\n   * @function\r\n   * @public\r\n   */\r\n  start(options) {\r\n    return super.start(options);\r\n    // TODO: figure out why this is needed/not needed\r\n    //.then(() => request\r\n    //  .get(`${this._config.url}/start`)\r\n    //  .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\r\n    //  .query({connectionData: JSON.stringify(this.connectionData)})\r\n    //  .query({connectionToken: this._transport.connectionToken})\r\n    //  .query({transport: this._transport.name})\r\n    //  .use(PromiseMaker)\r\n    //  .promise());\r\n  }\r\n\r\n  /**\r\n   *Overridden negotiate method that adds connectionData to th' initial query. ConnectionData holds th' names 'o th' current connected hubs.\r\n   * @returns {Promise} Returns the\r\n   * @private\r\n   * @function\r\n   */\r\n  _negotiate() {\r\n    return request\r\n      .get(`${this._config.url}/negotiate`)\r\n      .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\r\n      .query({connectionData: JSON.stringify(this.connectionData)})\r\n      .use(PromiseMaker)\r\n      .promise();\r\n  }\r\n}\r\n","import {isEmpty, isFunction, isUndefined, extend} from 'lodash';\r\nimport Logdown from 'logdown';\r\nimport Protocol from './Protocol';\r\nimport EventEmitter from './EventEmitter';\r\n/**\r\n * A proxy that can be used to invoke methods server-side.\r\n * @class\r\n */\r\nexport default class HubProxy extends EventEmitter {\r\n  /**\r\n   * Initializes the proxy given the current client and the hub that the client is connected to.\r\n   * @param {Client} client The current HubClient that is initialized.\r\n   * @param {string} hubName The name of the hub that the user wishes to generate a proxy for.\r\n   * @constructor\r\n   */\r\n  constructor(client, hubName) {\r\n    super();\r\n    this._state = {};\r\n    this._client = client;\r\n    this._hubName = hubName;\r\n    this._logger = new Logdown({prefix: hubName});\r\n    this.funcs = {};\r\n    this.server = {};\r\n  }\r\n\r\n  /**\r\n   * Invokes a server hub method with the given arguments.\r\n   * @param {string} methodName The name of the server hub method\r\n   * @param {Object} args The arguments to pass into the server hub method.\r\n   * @returns {*} The return statement invokes the send method, which sends the information the server needs to invoke the correct method.\r\n   * @function\r\n   */\r\n  invoke(methodName, ...args) {\r\n    let data = {\r\n      H: this._hubName,\r\n      M: methodName,\r\n      A: args.map(a => (isFunction(a) || isUndefined(a)) ? null : a),\r\n      I: this._client.invocationCallbackId\r\n    };\r\n\r\n    const callback = minResult => {\r\n      return new Promise((resolve, reject) => {\r\n        const result = Protocol.expandServerHubResponse(minResult);\r\n\r\n        // Update the hub state\r\n        extend(this._state, result.State);\r\n\r\n        if(result.Progress) {\r\n          // TODO: Progress in promises?\r\n        } else if(result.Error) {\r\n          // Server hub method threw an exception, log it & reject the deferred\r\n          if(result.StackTrace) {\r\n            this._logger.error(`${result.Error}\\n${result.StackTrace}.`);\r\n          }\r\n          // result.ErrorData is only set if a HubException was thrown\r\n          const source = result.IsHubException ? 'HubException' : 'Exception';\r\n          const error = new Error(result.Error);\r\n          error.source = source;\r\n          error.data = result.ErrorData;\r\n          this._logger.error(`${this._hubName}.${methodName} failed to execute. Error: ${error.message}`);\r\n          reject(error);\r\n        } else {\r\n          // Server invocation succeeded, resolve the deferred\r\n          this._logger.info(`Invoked ${this._hubName}\\.${methodName}`);\r\n          return resolve(result.Result);\r\n        }\r\n      });\r\n    };\r\n\r\n    this._client.invocationCallbacks[this._client.invocationCallbackId.toString()] = {scope: this, method: callback};\r\n    this._client.invocationCallbackId += 1;\r\n\r\n    if(!isEmpty(this.state)) {\r\n      data.S = this.state;\r\n    }\r\n\r\n    this._logger.info(`Invoking ${this._hubName}\\.${methodName}`);\r\n    return this._client.send(data);\r\n  }\r\n\r\n\r\n}","import Client from './Client';\r\n\r\nexport default window.SignalArr = Client;\r\n","export default function PromiseMaker(req) {\r\n  req.promise = function() {\r\n    return new Promise((resolve, reject) => {\r\n      req.end((err, res) => {\r\n        err = err || res.error;\r\n        if(err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(res.body);\r\n        }\r\n      });\r\n    });\r\n  };\r\n}","import _ from 'lodash';\r\n/**\r\n * A utility tavern that contains methods fer decompressin'/compressin' incomin' 'n outgoin' messages.\r\n * @class\r\n * @exports Protocol\r\n */\r\nexport default class Protocol {\r\n  /**\r\n   * Decompresses a message received from the server that is meant to contain information about invoking a method client-side.\r\n   * @param {Object} compressedClientHubInvocation The compressed message received from the server.\r\n   * @returns {Object} The decompressed message from the server. Contains client-side method invocation data.\r\n   * @function\r\n   * @static\r\n   * @public\r\n   */\r\n  static expandClientHubInvocation(compressedClientHubInvocation) {\r\n    return {\r\n      Hub: compressedClientHubInvocation.H,\r\n      Method: compressedClientHubInvocation.M,\r\n      Args: compressedClientHubInvocation.A,\r\n      State: compressedClientHubInvocation.S\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Decompresses a message received from a server hub into a more readible and workable form.\r\n   * @param {Object} compressedServerHubResponse The compressed, raw message received from the server.\r\n   * @returns {Object}  The decompressed message received from the server.\r\n   * @function\r\n   * @static\r\n   * @public\r\n   */\r\n  static expandServerHubResponse(compressedServerHubResponse) {\r\n    return {\r\n      State: compressedServerHubResponse.S,\r\n      Result: compressedServerHubResponse.R,\r\n      Progress: compressedServerHubResponse.P && {\r\n        Id: compressedServerHubResponse.P.I,\r\n        Data: compressedServerHubResponse.P.D\r\n      },\r\n      Id: compressedServerHubResponse.I,\r\n      IsHubException: compressedServerHubResponse.H,\r\n      Error: compressedServerHubResponse.E,\r\n      StackTrace: compressedServerHubResponse.T,\r\n      ErrorData: compressedServerHubResponse.D\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Decompresses a response from the server to a more readible and workable form.\r\n   * @param {Object} min The message that has been received from the server.\r\n   * @returns {Object} The decompressed message received from the server.\r\n   * @function\r\n   * @static\r\n   * @public\r\n   */\r\n  static expandResponse(min) {\r\n    if(_.isString(min)) {\r\n      min = JSON.parse(min);\r\n    }\r\n    return {\r\n      messageId: min.C,\r\n      messages: min.M || [],\r\n      initialized: !_.isUndefined(min.S),\r\n      shouldReconnect: !_.isUndefined(min.T),\r\n      longPollDelay: min.L,\r\n      groupsToken: min.G\r\n    };\r\n  }\r\n}","import ServerSentEventsTransport from './ServerSentEventsTransport';\r\nimport LongPollingTransport from './LongPollingTransport';\r\nimport WebSocketTransport from './WebSocketTransport';\r\nimport NullTransport from './NullTransport';\r\n\r\nexport function AvailableTransports() {\r\n  /*\r\n   // If jsonp with no/auto transport is specified, then set the transport to long polling\r\n   // since that is the only transport for which jsonp really makes sense.\r\n   // Some developers might actually choose to specify jsonp for same origin requests\r\n   // as demonstrated by Issue #623.\r\n   if(config.transport === 'auto' && config.jsonp === true) {\r\n   config.transport = 'longPolling';\r\n   }\r\n\r\n   // If the url is protocol relative, prepend the current windows protocol to the url.\r\n   if(this.url.indexOf('//') === 0) {\r\n   this.url = window.location.protocol + this.url;\r\n   _u.logger.info(`Protocol relative URL detected, normalizing it to \\`${this.url}\\`.`);\r\n   }\r\n\r\n   if(_u.isCrossDomain(this.url)) {\r\n   this.log('Auto detected cross domain url.');\r\n\r\n   if(config.transport === 'auto') {\r\n   // TODO: Support XDM with foreverFrame\r\n   config.transport = ['webSockets', 'serverSentEvents', 'longPolling'];\r\n   }\r\n\r\n   if(_u.isUndefined(config.withCredentials)) {\r\n   config.withCredentials = true;\r\n   }\r\n\r\n   // Determine if jsonp is the only choice for negotiation, ajaxSend and ajaxAbort.\r\n   // i.e. if the browser doesn't supports CORS\r\n   // If it is, ignore any preference to the contrary, and switch to jsonp.\r\n   if(!config.jsonp) {\r\n   config.jsonp = !_u.cors;\r\n\r\n   if(config.jsonp) {\r\n   this.log('Using jsonp because this browser doesn\\'t support CORS.');\r\n   }\r\n   }\r\n   }\r\n   */\r\n\r\n  return [\r\n    WebSocketTransport,\r\n    ServerSentEventsTransport,\r\n    LongPollingTransport,\r\n    NullTransport\r\n  ];\r\n}\r\n\r\n","import _ from 'lodash';\r\nimport request from 'superagent';\r\nimport Transport from './Transport';\r\nimport PromiseMaker from '../PromiseMaker';\r\nimport {CONNECTION_STATES, CONNECTION_EVENTS} from '../Constants';\r\n\r\n\r\n/**\r\n * Th' long pollin' transport protocol.\r\n * @class\r\n */\r\nexport default class LongPollingTransport extends Transport {\r\n  static supportsKeepAlive = false;\r\n\r\n  /**\r\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new Longpollin' transport.\r\n   * @param {Client} client The current instance of the user's client.\r\n   * @param {Object} treaty An Object that is the result of the initial client-server negotiation. Contains vital connection information.\r\n   * @param {string} url The URL of the server the user wishes to connect to.\r\n   * @constructor\r\n   */\r\n  constructor(client, treaty, url) {\r\n    super('longPolling', client, treaty);\r\n    this._maxReconnectedTimeout = 3600000;\r\n    this._url = url;\r\n  }\r\n\r\n  /**\r\n   * Initiates th' long pollin' transport protocol fer th' current connection.\r\n   * @returns {Promise} That resolves once th' long pollin' transport has started successfully 'n has begun pollin'.\r\n   * @param {Promise} current The current connection promise.\r\n   * @private\r\n   * @function\r\n   */\r\n  _queryData(current) {\r\n    return current\r\n      .query({clientProtocol: 1.5})\r\n      .query({connectionToken: this._connectionToken})\r\n      .query({transport: 'longPolling'})\r\n      .query({connectionData: this._data || ''});\r\n  }\r\n\r\n  /**\r\n   *Initiates th' connection after th' LongPollin'Transport transport type be declared via th' initial negotiation.\r\n   * @returns {Promise.<T>} Resolves once the client has successfully connected and has started to poll the server for a response.\r\n   * @function\r\n   * @public\r\n   * @extends start\r\n   * @emits connected\r\n   */\r\n  start() {\r\n    if(this._pollTimeoutId) {\r\n      throw new Error('A polling session has already been initialized. Call `stop()` before attempting to `start()` again.');\r\n    }\r\n    this._logger.info(`*${this.constructor.name}* starting...`);\r\n    return this._connect()\r\n      //.then(this._startConnection.bind(this))\r\n      .then(() => {\r\n        this.state = CONNECTION_STATES.connected;\r\n        this.emit(CONNECTION_EVENTS.onConnected);\r\n        this._reconnectTries = 0;\r\n        this._reconnectTimeoutId = null;\r\n      })\r\n      .then(this._poll.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Initiates th' long pollin' transport protocol fer th' current connection.\r\n   * @returns {Promise} that resolves once th' long pollin' transport has started successfully 'n has begun pollin'.\r\n   * @function\r\n   * @private\r\n   * @emits connecting\r\n   */\r\n  _connect() {\r\n    const url = this._url + '/connect';\r\n    this._logger.info(`Connecting to ${url}`);\r\n    this.state = CONNECTION_STATES.connecting;\r\n    this.emit(CONNECTION_EVENTS.connecting);\r\n    this._current = request\r\n      .post(url);\r\n    this._current = this._queryData(this._current);\r\n    return this._current\r\n      .use(PromiseMaker)\r\n      .promise()\r\n      .then(this._processMessages.bind(this));\r\n  }\r\n\r\n  //_startConnection() {\r\n  //  this._current = request\r\n  //    .post(this._url + '/start');\r\n  //  this._current = this._queryData(this._current);\r\n  //  return this._current\r\n  //    .use(PromiseMaker)\r\n  //    .promise();\r\n  //}\r\n\r\n  /**\r\n   * Initiates a poll to th' ship 'n hold th' poll open 'til th' ship be able to send new information.\r\n   * @returns {Promise} That resolves if th' client must reconnect due to bad connection.\r\n   * Else, th' method be called recursively after it recieves new information from th' ship.\r\n   * @emits reconnected\r\n   * @function\r\n   * @private\r\n   */\r\n  _poll() {\r\n    const poll = () => {\r\n      const {messageId, groupsToken, shouldReconnect} = this._lastMessages;\r\n      this._current = request\r\n        .post(this._url + '/poll');\r\n      this._current = this._queryData(this._current);\r\n      if(groupsToken) {\r\n        this._current = this._current\r\n          .send({messageId, groupsToken});\r\n      } else {\r\n        this._current = this._current\r\n          .send({messageId});\r\n      }\r\n      this._current = this._current\r\n        .end((err, res) => {\r\n          if(err && shouldReconnect) {\r\n            return this._reconnectTimeoutId = setTimeout(this._reconnect(), Math.min(1000 * (Math.pow(2, this._reconnectTries) - 1), this._maxReconnectedTimeout))\r\n              .then(this._poll);\r\n          }\r\n          if(res) {\r\n            if(this.state === CONNECTION_STATES.reconnecting) {\r\n              this.state = CONNECTION_STATES.connected;\r\n              this.emit(CONNECTION_EVENTS.reconnected);\r\n              this._reconnectTries = 0;\r\n            }\r\n            if(!_.isString(res.body)) {\r\n              this._processMessages(res.body);\r\n            }\r\n          }\r\n          if(!this._abortRequest) {\r\n            this._poll();\r\n          }\r\n        });\r\n\r\n    };\r\n    this._currentTimeoutId = setTimeout(poll.bind(this), 250);\r\n  }\r\n\r\n  /**\r\n   * Initiates th' long pollin' transport protocol fer th' current connection.\r\n   *  @param {data} data contains th' information that th' client wishes to send to th' ship.\r\n   *  @returns {Promise} that resolves once th' message has be sent..\r\n   *  @function\r\n   *  @public\r\n   *  @extends send\r\n   */\r\n  send(data) {\r\n    return request\r\n      .post(this._url + '/send')\r\n      .query({connectionToken: this._connectionToken})\r\n      .query({transport: 'longPolling'})\r\n      .send(`data=${JSON.stringify(data)}`)\r\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\r\n      .use(PromiseMaker)\r\n      .promise();\r\n  }\r\n\r\n  /**\r\n   * Initiates a reconnection to th' ship in th' case that th' connection be too slow or be lost completely.\r\n   *  @returns {Promise} that resolves once th' client has be successfully reconnected.\r\n   *  @function\r\n   *  @private\r\n   *  @emits reconnecting\r\n   */\r\n  _reconnect() {\r\n    const url = this._url + '/connect';\r\n    this.emit(CONNECTION_EVENTS.reconnecting);\r\n    this.state = CONNECTION_STATES.reconnecting;\r\n    this._logger.info(`Attempting to reconnect to ${url}`);\r\n    this._reconnectTries++;\r\n    this._current = request\r\n      .post(url);\r\n    this._current = this._queryData(this._current);\r\n\r\n    if((Math.min(1000 * (Math.pow(2, this._reconnectTries) - 1)) >= this._maxReconnectedTimeout)) {\r\n      this.stop();\r\n    }\r\n    return this._current\r\n      .use(PromiseMaker)\r\n      .promise()\r\n      .then(this._processMessages.bind(this));\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears th' timeouts 'n stops th' connection to th' ship cleanly.\r\n   * @returns {Promise} Resolves once the transport has successfully halted.\r\n   * @public\r\n   * @function\r\n   * @extends stop\r\n   * @emits disconnecting\r\n   * @emits disconnected\r\n   */\r\n  stop() {\r\n    clearTimeout(this._currentTimeoutId);\r\n    clearTimeout(this._reconnectTimeoutId);\r\n    this._abortRequest = true;\r\n    if(this._current) {\r\n      this._current.abort();\r\n    }\r\n    this.emit(CONNECTION_EVENTS.disconnecting);\r\n    this._logger.info(`Disconnecting from ${this._url}.`);\r\n    this.state = CONNECTION_STATES.disconnected;\r\n    this.emit(CONNECTION_EVENTS.disconnected);\r\n    this._logger.info('Successfully disconnected.');\r\n  }\r\n}\r\n","import Transport from './Transport';\r\n/**\r\n * A default, empty transport.\r\n */\r\nexport default class NullTransport extends Transport {\r\n  static supportsKeepAlive = false;\r\n\r\n  constructor(client, treaty) {\r\n    super('null', client, treaty);\r\n  }\r\n}\r\n","import Transport from './Transport';\r\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\r\nimport EventSourcePolyfill from 'eventsource';\r\nimport request from 'superagent';\r\nimport PromiseMaker from '../PromiseMaker';\r\n\r\nconst EventSource = (typeof window !== 'undefined' && window.EventSource) || EventSourcePolyfill;\r\n/**\r\n * The ServerSentEvents transport protocol.\r\n */\r\nexport default class ServerSentEventsTransport extends Transport {\r\n  static supportsKeepAlive = true;\r\n\r\n  /**\r\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new ServerSentEvents transport.\r\n   * @param {Client} client The client that will be initiating the new ServerSentEvents connection.\r\n   * @param {Object} treaty An object that holds the reults from the original negotiation between client-server. Contains critical connection information.\r\n   * @param {string} url The URL of the server the client is connecting to.\r\n   * @constructor\r\n   */\r\n  constructor(client, treaty, url) {\r\n    super('serverSentEvents', client, treaty);\r\n    this._intentionallyClosed = null;\r\n    this._url = url;\r\n  }\r\n\r\n  /**\r\n   * Initates th' ServerSentEvents connection, as well as handles onmessage, onerror,  'n onopen events.\r\n   * @returns {Promise} Resolves when the client hasb een successfully connected to the server via a ServerSentEvents transport.\r\n   * @public\r\n   * @function\r\n   * @extends start\r\n   * @emits reconnecting\r\n   * @emits connecting\r\n   * @emits connected\r\n   * @emits reconnected\r\n   */\r\n  start(){\r\n    return new Promise((resolve, reject) => {\r\n      if(this._eventSource && this._intentionallyClosed) {\r\n        return reject(new Error('An EventSource has already been initialized. Call `stop()` before attempting to `start()` again.'));\r\n      }\r\n\r\n      this._logger.info(`*${this.constructor.name}* starting...`);\r\n      let url = this._url;\r\n      if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\r\n        this._logger.info(`Reconnecting to ${url}`);\r\n        url += `/reconnect?transport=serverSentEvents&connectionToken=${encodeURIComponent(this._connectionToken)}`;\r\n        this.emit(CONNECTION_EVENTS.reconnecting);\r\n      }else {\r\n        this._logger.info(`Connecting to ${url}`);\r\n        url += `/connect?transport=serverSentEvents&connectionToken=${encodeURIComponent(this._connectionToken)}`;\r\n        this.emit(CONNECTION_EVENTS.connecting);\r\n        this.state = CONNECTION_STATES.connecting;\r\n      }\r\n      url += '&tid=' + Math.floor(Math.random() * 11);\r\n\r\n      this._eventSource = new EventSource(url);\r\n      this._eventSource.onopen = e => {\r\n        if(e.type === 'open') {\r\n          this._logger.info(`*${this.constructor.name}* connection opened.`);\r\n          if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\r\n            this.emit(CONNECTION_EVENTS.reconnected);\r\n          } else {\r\n            this.emit(CONNECTION_EVENTS.onConnected);\r\n          }\r\n          this.state = CONNECTION_STATES.connected;\r\n          resolve();\r\n        }\r\n      };\r\n      this._eventSource.onmessage = e => {\r\n        if (e.data === 'initialized') {\r\n          return;\r\n        }\r\n        this._processMessages(e.data);\r\n      };\r\n      this._eventSource.onerror = e => {\r\n        this._logger.error(`*${this.constructor.name}* connection errored: ${e}`);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleanly disconnects from th' target ship.\r\n   * @returns {Promise} Resolves once the connection has been halted successfully.\r\n   * @function\r\n   * @public\r\n   * @extends stop\r\n   * @emits disconnecting\r\n   * @emits disconnected\r\n   */\r\n  stop(){\r\n    if(this._eventSource){\r\n      this.emit(CONNECTION_EVENTS.disconnecting);\r\n      this._intentionallyClosed = true;\r\n      this._eventSource.close();\r\n      this._logger.info(`*${this.constructor.name}* connection closed.`);\r\n      this.state = CONNECTION_STATES.disconnected;\r\n      this.emit(CONNECTION_EVENTS.disconnected);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a promise that resolves when a message be sent with th' passed in data to th' target URL.\r\n   * @param {Object} data The message to send to the server.\r\n   * @returns {Promise} Resolves once the message has been sent successfully.\r\n   * @private\r\n   * @function\r\n   */\r\n  send(data) {\r\n    return request\r\n      .post(this._url + '/send')\r\n      .query({connectionToken: this._connectionToken})\r\n      .query({transport: 'serverSentEvents'})\r\n      .send(`data=${JSON.stringify(data)}`)\r\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\r\n      .use(PromiseMaker)\r\n      .promise();\r\n  }\r\n  /**\r\n   * If th' keepAlive times out, closes th' connection cleanly 'n attempts to reconnect.\r\n   * @private\r\n   * @returns {void} Method does not return a value.\r\n   * @emits disconnecting\r\n   */\r\n  _keepAliveTimeoutDisconnect(){\r\n    this.emit(CONNECTION_EVENTS.disconnecting);\r\n    this._intentionallyClosed = false;\r\n    this._eventSource.close();\r\n    this._logger.info(`*${this.constructor.name}* connection closed unexpectedly... Attempting to reconnect.`);\r\n    this.state = CONNECTION_STATES.reconnecting;\r\n    this._reconnectTimeoutId = setTimeout(this.start(), this._reconnectWindow);\r\n  }\r\n}\r\n","import Logdown from 'logdown';\r\nimport Protocol from '../Protocol';\r\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\r\nimport takeRight from 'lodash.takeright';\r\nimport EventEmitter from '../EventEmitter';\r\n\r\nexport default class Transport extends EventEmitter {\r\n  /**\r\n   * Initializes th' transport instance\r\n   * @param {string} name th' moniker 'o th' transport (must be th' same value as th' ship's correspondin' transport moniker)\r\n   * @param {Client} client th' parent SignalR client\r\n   * @param {Object} treaty th' response from th' negotiate request created by th' SignalR ship\r\n   * @constructor\r\n   */\r\n  constructor(name, client, treaty) {\r\n    super();\r\n    this.state = CONNECTION_STATES.disconnected;\r\n    this.name = name;\r\n    this._client = client;\r\n    this._logger = new Logdown({prefix: `${this.name}`});\r\n    this._abortRequest = false;\r\n    this._lastMessages = [];\r\n    this._keepAliveData = {};\r\n    this._connectionToken = treaty.ConnectionToken;\r\n    this._connectionId = treaty.ConnectionId;\r\n    this._reconnectWindow = (treaty.KeepAliveTimeout + treaty.DisconnectTimeout) * 1000;\r\n    this._keepAliveData = {\r\n      monitor: false,\r\n      activated: !!treaty.KeepAliveTimeout,\r\n      timeout: treaty.KeepAliveTimeout * 1000,\r\n      timeoutWarning: (treaty.KeepAliveTimeout * 1000) * (2 / 3),\r\n      transportNotified: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initiates a new transport 'n begins th' connection process.\r\n   *  @returns {Promise} that gunna reject due to th' method needin' to be overridden.\r\n   *  @abstract\r\n   *  @public\r\n   */\r\n  start() {\r\n    return new Promise((resolve, reject) => {\r\n      reject(new Error('Not Implemented: The `start()` function on the `Transport` class must be overridden in a derived type.'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Accessor fer th' state property 'o th' transport. Sets th' state to newState 'n automatically emits th' correct events.\r\n   * @param {string} newState The new state of the connection.\r\n   * @emits stateChanging\r\n   * @emits stateChanged\r\n   * @public\r\n   * @returns {void} This method does not return a value directly, it is used as an accessor to set a new state.\r\n   */\r\n  set state(newState) {\r\n    if(!this._state) {\r\n      this._state = newState;\r\n    } else {\r\n      this.emit(CONNECTION_EVENTS.stateChanging, {oldState: this.state, newState});\r\n      this._state = newState;\r\n      this.emit(CONNECTION_EVENTS.stateChanged, newState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *Accessor fer th' state property 'o th' transport. Returns th' current state 'o th' client.\r\n   * @returns {string} Returns the current state of the connection\r\n   * @public\r\n   */\r\n  get state() {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Accessor fer th' connection token 'o th' transport. Returns th' current connection token 'o th' client.\r\n   * @returns {Object} Returns the current connection's transport token.\r\n   * @public\r\n   */\r\n  get connectionToken() {\r\n    return this._connectionToken;\r\n  }\r\n\r\n  /**\r\n   * Haults th' current connection 'n safely disconnects.\r\n   *  @returns {Promise} that gunna reject due to th' method needin' to be overridden.\r\n   *  @function\r\n   *  @abstract\r\n   *  @public\r\n   */\r\n  stop() {\r\n    return new Promise((resolve, reject) => {\r\n      reject(new Error('Not Implemented: The `stop()` function on the `Transport` class must be overridden in a derived type.'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sends a message to th' connected ship.\r\n   * @returns {Promise} thta gunna reject due to th' method needin' to be overridden.\r\n   * @function\r\n   * @abstract\r\n   * @public\r\n   */\r\n  send() {\r\n    return new Promise((resolve, reject) => {\r\n      reject(new Error('Not Implemented: The `send()` function on the `Transport` class must be overridden in a derived type.'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emits an event at both th' Transport 'n Client levels without needin' to invoke both emits seperately.\r\n   * @param {Object} event Th' event that be to be emitted.\r\n   * @param {Object} args Arguments that correspond to th' event.\r\n   * @function\r\n   * @public\r\n   * @extends emit\r\n   * @returns {void} This method does not return a value.\r\n   */\r\n  emit(event, ...args) {\r\n    this._client.emit(event, ...args);\r\n    super.emit(event, ...args);\r\n  }\r\n\r\n  /**\r\n   * Private method that takes a passed in compressed message (recieved from th' ship or other service), 'n decompresses it fer readability 'n use.\r\n   * Messages be also pushed into a buffer 'n timestamped as well.\r\n   * @param {Object} compressedResponse The compressed response from the server.\r\n   * @emits receiving\r\n   * @emits received\r\n   * @returns {void} Method does not return a value.\r\n   * @protected\r\n   * @function\r\n   */\r\n  _processMessages(compressedResponse) {\r\n    this.emit(CONNECTION_EVENTS.receiving, compressedResponse);\r\n    const expandedResponse = Protocol.expandResponse(compressedResponse);\r\n    this._lastMessageAt = new Date().getTime();\r\n    this._lastMessages = takeRight([...this._lastMessages, expandedResponse], 5);\r\n    this.emit(CONNECTION_EVENTS.received, expandedResponse.messages);\r\n  }\r\n\r\n  /**\r\n   * Accessor fer th' timestampin' th' last message recieved. Initiates a keepAlive timeout if keepAlive be supported by th' current transport type.\r\n   * @param {Object} newTimestamp A timestamp of the last received message.\r\n   * @private\r\n   * @function\r\n   * @returns {void} Method does not return a value.\r\n   */\r\n  set _lastMessageAt(newTimestamp) {\r\n    if(this._supportsKeepAlive()) {\r\n      this._keepAliveTimeoutId = setTimeout(this._keepAliveTimeoutDisconnect, this._keepAliveData.timeout);\r\n    }\r\n    this._latestMessageTime = newTimestamp;\r\n  }\r\n\r\n  /**\r\n   * Accessor that returns th' latest message's timestamp.\r\n   * @returns {Object} Returns the timestamp of the last received message.\r\n   * @private\r\n   */\r\n  get _lastMessageAt() {\r\n    return this._latestMessageTime;\r\n  }\r\n\r\n  /**\r\n   * Determines if th' current transport supports keepAlive functionality.\r\n   * @returns {*|ServerSentEventsTransport.supportsKeepAlive|LongPollingTransport.supportsKeepAlive|NullTransport.supportsKeepAlive|WebSocketTransport.supportsKeepAlive}\r\n   * Returns true if the transport type supports keepAlive or false if it does not.\r\n   * @private\r\n   */\r\n  _supportsKeepAlive() {\r\n    return this._keepAliveData.activated && this.supportsKeepAlive;\r\n  }\r\n}\r\n","import Transport from './Transport';\r\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\r\n\r\nexport default class WebSocketTransport extends Transport {\r\n  static supportsKeepAlive = true;\r\n\r\n  /**\r\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new WebSocket transport.\r\n   * @param {Client} client The client that will be initiating the new WebSocketTransport connection.\r\n   * @param {Object} treaty An object that holds the reults from the original negotiation between client-server. Contains critical connection information.\r\n   * @param {string} url The URL of the server the client is connecting to.\r\n   * @constructor\r\n   */\r\n  constructor(client, treaty, url) {\r\n    super('webSockets', client, treaty);\r\n    this._intentionallyClosed = null;\r\n    this._url = url;\r\n  }\r\n\r\n  /**\r\n   * Returns a promise to send th' passed in data to th' target URL.\r\n   * @param {Object} data The message to send to the server.\r\n   * @returns {Promise} Promise that resolves once the message has been sent successfully.\r\n   * @private\r\n   * @function\r\n   * @extends send\r\n   */\r\n  send(data) {\r\n    return new Promise((resolve, reject) => {\r\n      if(!this._socket) {\r\n        return reject(new Error('The WebSocket has not yet been initialized.'));\r\n      }\r\n      this._socket.send(JSON.stringify(data));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initates th' WebSocket connection, as well as handles onmessage, onerror, onclose, 'n onopen events.\r\n   * @returns {Promise} That resolves successfully once the client has been successfully connected to the server using the WebSocketsTransport.\r\n   * @public\r\n   * @fucntion\r\n   * @emits reconnecting\r\n   * @emits connecting\r\n   * @emits connected\r\n   * @emits reconnected\r\n   * @emits disconnected\r\n   * @extends start\r\n   */\r\n  start() {\r\n    return new Promise((resolve, reject) => {\r\n      if(!WebSocket) {\r\n        return reject(new Error('The type `WebSocket` could not be resolved.'));\r\n      }\r\n      if(this._socket && this._intentionallyClosed) {\r\n        return reject(new Error('A socket has already been initialized. Call `stop()` before attempting to `start()` again.'));\r\n      }\r\n\r\n      this._logger.info(`*${this.constructor.name}* starting...`);\r\n      let url = this._url.replace(/http(s)?:/, 'ws:');\r\n      this._logger.info(`Connecting to ${url}`);\r\n\r\n      if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\r\n        url += `/reconnect?transport=webSockets&connectionToken=${encodeURIComponent(this._connectionToken)}`;\r\n        this.emit(CONNECTION_EVENTS.reconnecting);\r\n      } else {\r\n        url += `/connect?transport=webSockets&connectionToken=${encodeURIComponent(this._connectionToken)}`;\r\n        this.emit(CONNECTION_EVENTS.connecting);\r\n        this.state = CONNECTION_STATES.connecting;\r\n      }\r\n      if(this._client.connectionData) {\r\n        url += `&connectionData=${JSON.stringify(this._client.connectionData)}`;\r\n      }\r\n      url += '&tid=' + Math.floor(Math.random() * 11);\r\n      this._socket = new WebSocket(url);\r\n      this._socket.onopen = e => {\r\n        if(e.type === 'open') {\r\n          this._logger.info(`*${this.constructor.name}* connection opened.`);\r\n          if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\r\n            this.emit(CONNECTION_EVENTS.reconnected);\r\n          } else {\r\n            this.emit(CONNECTION_EVENTS.onConnected);\r\n          }\r\n          this.state = CONNECTION_STATES.connected;\r\n          resolve();\r\n        }\r\n      };\r\n      this._socket.onmessage = e => {\r\n        this._processMessages(e.data);\r\n      };\r\n      this._socket.onerror = e => {\r\n        this._logger.error(`*${this.constructor.name}* connection errored: ${e}`);\r\n      };\r\n      this._socket.onclose = () => {\r\n        if(this._intentionallyClosed) {\r\n          this._logger.info(`*${this.constructor.name}* connection closed.`);\r\n          this.state = CONNECTION_STATES.disconnected;\r\n          this.emit(CONNECTION_EVENTS.disconnected);\r\n        } else {\r\n          this._logger.info(`*${this.constructor.name}* connection closed unexpectedly... Attempting to reconnect.`);\r\n          this.state = CONNECTION_STATES.reconnecting;\r\n          this._reconnectTimeoutId = setTimeout(this.start(), this._reconnectWindow);\r\n        }\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Cleanly disconnects from th' target ship.\r\n   * @returns {Promise} Resolves once the connection has successfully halted.\r\n   * @function\r\n   * @public\r\n   * @extends stop\r\n   * @emits disconnecting\r\n   */\r\n  stop() {\r\n    if(this._socket) {\r\n      this.emit(CONNECTION_EVENTS.disconnecting);\r\n      this._intentionallyClosed = true;\r\n      this._socket.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If th' keepAlive times out, closes th' connection cleanly 'n attempts to reconnect.\r\n   * @private\r\n   * @returns {void} Method does not return a value.\r\n   * @emits disconnecting\r\n   */\r\n  _keepAliveTimeoutDisconnect() {\r\n    this.emit(CONNECTION_EVENTS.disconnecting);\r\n    this._socket.close();\r\n  }\r\n}\r\n\r\n"]}